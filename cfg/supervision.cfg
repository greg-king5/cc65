# If you want to combine the 2 16-Kbyte ROMs,
# make sure the halves are mirrored in the 64-Kbyte cartridge image;
# or, reset to code > 0xC000; and, switch banks to the 3rd bank.

SYMBOLS {
    __STACKSIZE__: type = weak, value = $0100; # 1 page stack
    __HIMEM__:     type = weak, value = $2000;
}
MEMORY {
    ZP:       file = "", start = $0000, size = $0100;
    CPUSTACK: file = "", start = $0100, size = $0100;
    RAM:      file = "", start = %S,    size = __HIMEM__ - __STACKSIZE__ - %S,   define = yes;
    VRAM:     file = "", start = $4000, size = $2000;
    ROM:      file = %O, start = $8000, size = $8000, fill = yes, fillval = $FF, define = yes;
}
SEGMENTS {
    ZEROPAGE: load = ZP,  type = zp,  define = yes;
    LOWCODE:  load = ROM, type = ro,               optional = yes;
    CODE:     load = ROM, type = ro,  define = yes;
    ONCE:     load = ROM, type = ro,               optional = yes;
    RODATA:   load = ROM, type = ro,  define = yes;
    DATA:     load = ROM,
              run  = RAM, type = rw,  define = yes;
    FFF0:     load = ROM, type = ro,               start    = $FFF0;
    VECTORS:  load = ROM, type = ro,               start    = $FFFA;
    INIT:     load = RAM, type = bss;
    BSS:      load = RAM, type = bss, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
